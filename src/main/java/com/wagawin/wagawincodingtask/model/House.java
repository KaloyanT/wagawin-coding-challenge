package com.wagawin.wagawincodingtask.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.MapsId;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import java.util.Objects;

@Entity(name = "House")
@Table(name = "house")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class House {

    /*
     The House Entity's Id won't show up in the MySQL Table generated by Hibernate unlike the
     other entities' Ids since House is basically (although it is not annotated) a child Entity
     in the OneToOne mapping with Person. That means that the personId and the houseId will be the
     same. However, we can't get rid of the houseId field, an Entity needs an Id field
    */
    @Id
    @Column(name = "houseId")
    private long houseId;

    @Basic(optional = false)
    @NotNull
    private String address;

    @Basic(optional = false)
    @NotNull
    private String zipCode;

    @OneToOne(fetch = FetchType.LAZY)
    @MapsId
    @JsonIgnore
    private Person person;

    @Column(name = "type")
    @Enumerated(EnumType.STRING)
    private HouseType type;

    public long getHouseId() {
        return houseId;
    }

    public void setHouseId(long houseId) {
        this.houseId = houseId;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    public Person getPerson() {
        return person;
    }

    public void setPerson(Person person) {
        this.person = person;
    }

    public HouseType getType() {
        return type;
    }

    public void setType(HouseType type) {
        this.type = type;
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.houseId);
    }

    @Override
    public boolean equals(Object o) {

        if(this == o) {
            return true;
        }
        if(! (o instanceof House) ) {
            return false;
        }

        return (this.houseId != 0) && (this.houseId == ((House) o).houseId);
    }

    @Override
    public String toString() {

        return "House: {" +
                "houseId=" + getPerson().getPersonId() +
                ", address=" + getAddress() +
                ", zipCode=" + getZipCode() +
                ", type=" + getType() +
                "}";
    }
}
